int a = 10 ;
int b = 25 ;

int* p  = &b ;
int* pp = &a ;

1. *(&(*(*(&p))))
 la valeur de a
 la valeur de b, VRAI
 l’adresse de a
 l’adresse de b
 la valeur de p
 la valeur de pp

Apres les annulations, on a un pointeur sur p donc un *p avec p = &b, donc b (*&b).

2. *(p - 1)
 la valeur de a, VRAI
 la valeur de b
 l’adresse de a
 l’adresse de b
 la valeur de p
 la valeur de pp

On a un pointeur sur l'addresse avant b, donc dans la pile, a.

3. *(*(&p) -1)
 la valeur de a, VRAI
 la valeur de b
 l’adresse de a
 l’adresse de b
 la valeur de p
 la valeur de pp

On a un pointeur sur l'addresse avant b, donc dans la pile, a.

4. *(*(&pp) + 1)
 la valeur de a
 la valeur de b, VRAI
 l’adresse de a
 l’adresse de b
 la valeur de p
 la valeur de pp

On a un pointeur sur l'addresse apres a, donc dans la pile, donc b

5. *(&(*(*(&p))) - 1)
 la valeur de a
 la valeur de b
 l’adresse de a
 l’adresse de b
 la valeur de p
 la valeur de pp

On a un pointeur sur l'addresse avant b, donc dans la pile, a.
