//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RecipeClient.RecipeServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RecipeServiceReference.InterfaceRecipeService")]
    public interface InterfaceRecipeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceRecipeService/AddRecipe", ReplyAction="http://tempuri.org/InterfaceRecipeService/AddRecipeResponse")]
        void AddRecipe(RecipeShare.Recipe p_recipe_to_add);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceRecipeService/AddRecipe", ReplyAction="http://tempuri.org/InterfaceRecipeService/AddRecipeResponse")]
        System.Threading.Tasks.Task AddRecipeAsync(RecipeShare.Recipe p_recipe_to_add);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceRecipeService/GetRecipes", ReplyAction="http://tempuri.org/InterfaceRecipeService/GetRecipesResponse")]
        RecipeShare.Recipe[] GetRecipes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceRecipeService/GetRecipes", ReplyAction="http://tempuri.org/InterfaceRecipeService/GetRecipesResponse")]
        System.Threading.Tasks.Task<RecipeShare.Recipe[]> GetRecipesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceRecipeService/GetRecipesByIngredient", ReplyAction="http://tempuri.org/InterfaceRecipeService/GetRecipesByIngredientResponse")]
        RecipeShare.Recipe[] GetRecipesByIngredient(string p_ingredient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceRecipeService/GetRecipesByIngredient", ReplyAction="http://tempuri.org/InterfaceRecipeService/GetRecipesByIngredientResponse")]
        System.Threading.Tasks.Task<RecipeShare.Recipe[]> GetRecipesByIngredientAsync(string p_ingredient);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface InterfaceRecipeServiceChannel : RecipeClient.RecipeServiceReference.InterfaceRecipeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InterfaceRecipeServiceClient : System.ServiceModel.ClientBase<RecipeClient.RecipeServiceReference.InterfaceRecipeService>, RecipeClient.RecipeServiceReference.InterfaceRecipeService {
        
        public InterfaceRecipeServiceClient() {
        }
        
        public InterfaceRecipeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public InterfaceRecipeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InterfaceRecipeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InterfaceRecipeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddRecipe(RecipeShare.Recipe p_recipe_to_add) {
            base.Channel.AddRecipe(p_recipe_to_add);
        }
        
        public System.Threading.Tasks.Task AddRecipeAsync(RecipeShare.Recipe p_recipe_to_add) {
            return base.Channel.AddRecipeAsync(p_recipe_to_add);
        }
        
        public RecipeShare.Recipe[] GetRecipes() {
            return base.Channel.GetRecipes();
        }
        
        public System.Threading.Tasks.Task<RecipeShare.Recipe[]> GetRecipesAsync() {
            return base.Channel.GetRecipesAsync();
        }
        
        public RecipeShare.Recipe[] GetRecipesByIngredient(string p_ingredient) {
            return base.Channel.GetRecipesByIngredient(p_ingredient);
        }
        
        public System.Threading.Tasks.Task<RecipeShare.Recipe[]> GetRecipesByIngredientAsync(string p_ingredient) {
            return base.Channel.GetRecipesByIngredientAsync(p_ingredient);
        }
    }
}
